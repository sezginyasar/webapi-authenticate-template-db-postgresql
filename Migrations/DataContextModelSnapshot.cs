// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using webapiV2.Helpers;

#nullable disable

namespace webapiV2.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("webapiV2.Entities.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("accept_terms");

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("adi");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text")
                        .HasColumnName("reset_token");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reset_token_expires");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Soyadi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("soyadi");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text")
                        .HasColumnName("verification_token");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified");

                    b.HasKey("id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("webapiV2.Entities.Logs.DbLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Browser")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("browser");

                    b.Property<string>("IpAdres")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ip_adres");

                    b.Property<string>("Islem")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("islem");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message");

                    b.Property<object>("Nesne")
                        .HasColumnType("jsonb")
                        .HasColumnName("nesne");

                    b.Property<Guid?>("NesneId")
                        .HasColumnType("uuid")
                        .HasColumnName("nesne_id");

                    b.Property<string>("Tablo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("tablo");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.Property<DateTime>("Zaman")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("zaman");

                    b.HasKey("Id");

                    b.ToTable("db_log");
                });

            modelBuilder.Entity("webapiV2.Entities.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("icon");

                    b.Property<string>("Menuler")
                        .HasColumnType("jsonb")
                        .HasColumnName("menuler");

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("order");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("page_name");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<bool>("SubMenu")
                        .HasMaxLength(100)
                        .HasColumnType("boolean")
                        .HasColumnName("submenu");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("menu");
                });

            modelBuilder.Entity("webapiV2.Entities.PageAuthorization.Pages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalAuthFive")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("additional_auth_five");

                    b.Property<string>("AdditionalAuthFour")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("additional_auth_four");

                    b.Property<string>("AdditionalAuthOne")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("additional_auth_one");

                    b.Property<string>("AdditionalAuthThree")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("additional_auth_three");

                    b.Property<string>("AdditionalAuthTwo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("additional_auth_two");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon");

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("order");

                    b.Property<string>("PageGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("page_group_name");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("page_name");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("path");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("pages");
                });

            modelBuilder.Entity("webapiV2.Entities.PageAuthorization.UserPagePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdditionalAuthFive")
                        .HasColumnType("boolean")
                        .HasColumnName("additional_auth_five");

                    b.Property<bool>("AdditionalAuthFour")
                        .HasColumnType("boolean")
                        .HasColumnName("additional_auth_four");

                    b.Property<bool>("AdditionalAuthOne")
                        .HasColumnType("boolean")
                        .HasColumnName("additional_auth_one");

                    b.Property<bool>("AdditionalAuthThree")
                        .HasColumnType("boolean")
                        .HasColumnName("additional_auth_three");

                    b.Property<bool>("AdditionalAuthTwo")
                        .HasColumnType("boolean")
                        .HasColumnName("additional_auth_two");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean")
                        .HasColumnName("Delete");

                    b.Property<int>("PagesId")
                        .HasColumnType("integer")
                        .HasColumnName("page_id");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean")
                        .HasColumnName("read");

                    b.Property<bool>("Save")
                        .HasColumnType("boolean")
                        .HasColumnName("save");

                    b.Property<bool>("Update")
                        .HasColumnType("boolean")
                        .HasColumnName("Update");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PagesId");

                    b.HasIndex("UserId");

                    b.ToTable("user_page_permissions");
                });

            modelBuilder.Entity("webapiV2.Entities.Account", b =>
                {
                    b.OwnsMany("webapiV2.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("AccountId")
                                .HasColumnType("integer")
                                .HasColumnName("account_id");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created");

                            b1.Property<string>("CreatedByIp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("created_by_ip");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("expires");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("text")
                                .HasColumnName("reason_revoked");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text")
                                .HasColumnName("resplaced_by_token");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("revoked");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text")
                                .HasColumnName("revoked_by_ip");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("token");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("refresh_token");

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId");

                            b1.Navigation("Account");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("webapiV2.Entities.PageAuthorization.UserPagePermissions", b =>
                {
                    b.HasOne("webapiV2.Entities.PageAuthorization.Pages", "Pages")
                        .WithMany("UserPagePermissions")
                        .HasForeignKey("PagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapiV2.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("webapiV2.Entities.PageAuthorization.Pages", b =>
                {
                    b.Navigation("UserPagePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
